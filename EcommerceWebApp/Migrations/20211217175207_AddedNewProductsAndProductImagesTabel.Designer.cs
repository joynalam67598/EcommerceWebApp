// <auto-generated />
using System;
using EcommerceWebApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EcommerceWebApp.Migrations
{
    [DbContext(typeof(AlishaMartContext))]
    [Migration("20211217175207_AddedNewProductsAndProductImagesTabel")]
    partial class AddedNewProductsAndProductImagesTabel
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EcommerceWebApp.Data.Brands", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrandName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BrandName")
                        .IsUnique()
                        .HasFilter("[BrandName] IS NOT NULL");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("EcommerceWebApp.Data.Categories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryName")
                        .IsUnique()
                        .HasFilter("[CategoryName] IS NOT NULL");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("EcommerceWebApp.Data.ProductImages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductsId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductsId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("EcommerceWebApp.Data.Products", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AvailableQuantity")
                        .HasColumnType("int");

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int?>("BrandsId")
                        .HasColumnType("int");

                    b.Property<double>("BuyingPrice")
                        .HasColumnType("float");

                    b.Property<int?>("CategoriesId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CoverImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("SellingPrice")
                        .HasColumnType("float");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("StockInDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BrandsId");

                    b.HasIndex("CategoriesId");

                    b.HasIndex("ProductName", "ProductCode")
                        .IsUnique()
                        .HasFilter("[ProductName] IS NOT NULL AND [ProductCode] IS NOT NULL");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("EcommerceWebApp.Data.ProductImages", b =>
                {
                    b.HasOne("EcommerceWebApp.Data.Products", "Products")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductsId");
                });

            modelBuilder.Entity("EcommerceWebApp.Data.Products", b =>
                {
                    b.HasOne("EcommerceWebApp.Data.Brands", "Brands")
                        .WithMany("Products")
                        .HasForeignKey("BrandsId");

                    b.HasOne("EcommerceWebApp.Data.Categories", "Categories")
                        .WithMany("Products")
                        .HasForeignKey("CategoriesId");
                });
#pragma warning restore 612, 618
        }
    }
}
